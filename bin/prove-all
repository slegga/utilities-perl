#!/usr/bin/env perl

use warnings;
use strict;
use autodie;
use Carp;
use feature 'say';
use Git::Repository;
use Term::ANSIColor;
use Mojo::File qw'path curfile';
use YAML::Tiny;

=head1 NAME

prove-all

=head1 DESCRIPTION

Check if git is in sync and test all repos

    # check if in basegit repo or die
    my $curdir = Mojo::File::curfile;
    $curdir = Mojo::File->new;
    die "You are not in a git-directory".$curdir->child('.git')->to_string if ! -d $curdir->child('.git')->to_string;
    # prove or die
    say `prove -l -Q --state save 2>/dev/null 1>/dev/null`;
    my $provedata = YAML::Tiny->read( $curdir->child('.prove')->to_string )->[0]->{tests};
#    say Dumper $provedata;
    for my $testfile(keys %$provedata) {
        die "$testfile did not pass. Please run prove -lv $testfile" if $provedata->{$testfile}->{last_result};
    }


=cut

sub prove {
    my $dir = shift;
    chdir $dir;
    my $dirmf = path($dir);
    if ($dirmf->child('.gitignore')->slurp !~/\.prove/) {
        die "echo .prove >> $dir/.gitignore";
    }
    my $success = 'Result: PASS';
    my $prove   = `prove -l -Q --state save 2>/dev/null 1>/dev/null`;
        my $provedata = YAML::Tiny->read( path($dir)->child('.prove')->to_string )->[0]->{tests};
        for my $testfile(keys %$provedata) {
            if ($provedata->{$testfile}->{last_result}) {
                say STDERR "$testfile did not pass. Please run:\ncd $dir;prove -lv $testfile"
            }
        }
 }

my $gitdir = curfile->dirname->dirname->to_string;
opendir (my $dh , $gitdir);
while (my $item = readdir $dh) {
    next if $item =~/^\./;
    my $wd = "$gitdir/$item";
    next if ! -d $wd;
    next if ! -d "$wd/.git";
    next if ! -d "$wd/lib" && ! -d "$wd/t";
	print color('blue');
    say "$wd";
	print color('reset');
    my $r = Git::Repository->new( work_tree => $wd );
    $r->run( 'remote','update');
    my $output = $r->run( 'status' );
    if ($output =~/On branch \w+\s*\nYour branch is up[-\s]to[-\s]date.+nothing to commit\, working tree clean/ms) {
        $r->run( 'pull' );
        prove($wd);
        next;
    }
    elsif ( $output =~ /Your branch is behind '[\w\/]+' by \d+ commits, and can be fast-forwarded./ms ) {
        $r->run( 'pull' );
        prove($wd);
        next;
    }
    say $output;
#    die "git repo is unclean.";
}
closedir $dh;
