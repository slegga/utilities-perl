#!/usr/bin/env perl
use strict;
use warnings;
use autodie;
use Mojo::File qw /path curfile/;

my $lib;
BEGIN {
    my $gitdir = Mojo::File->curfile;
    my @cats = @$gitdir;
    while (my $cd = pop @cats) {
        if ($cd eq 'git') {
            $gitdir = path(@cats,'git');
            last;
        }
    }
    $lib =  $gitdir->child('utilities-perl','lib')->to_string;
};

use List::MoreUtils qw(any uniq);
use utf8;
use open ':locale';
use File::Copy;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Mojo::Base 'SH::ScriptX', -signatures ;
use SH::ScriptX;
use SH::Test::Pod;

=encoding utf8

=head1 NAME

spellchecker - Spell check a file

=head1 DESCRIPTION

Spellcheck a file. or stdin.
Use OS dictionary

stein@IdeaPad-S145-14IWL:~/git/dokumentasjon$ find docs/ -name "*.md" -exec spellchecker --silence --file {} \;

=head2 Dictionaries

=over

=item OS dictionary

/usr/share/dict/words

=item global

/local/net/etc/.dictionary

=item personal dictionary

~/.dictionary.txt

=item repo dictionary

git-repo/.dictionary.txt

=back

=head1 AUTHOR

Slegga - C<steihamm@gmail.com>

=cut



#my ($opts,$usage) = options_and_usage($0,\@ARGV,
#    "%c %o",
#    ['add',          'add words to the personaldictonary.txt file' ],
#    [ 'email|e=s',      'Send to email instead of screen' ],
#    [ 'file|f=s',       'Run only the given file' ],
#    {return_uncatched_arguments => 1}
#);
    option ('add!',           'add words to the personaldictonary.txt file' );
    option ('email=s',        'Send to email instead of screen' );
    option ('file=s',         'Run only the given file' );
    option ('fileregex=s',    'Takes regexp. Matchet with full path' );
    option ('path=s',         'Togetter with fileregex set path to search');
    option ('ignoredfiles=s', 'List of ignored files separated with comma. Only the filename not path');
    option ('silence!',       'Only print wrong words' );

sub main($self) {
    if ( $self->add ) {
        my @extrawords = @ARGV;
        if ( @extrawords) {
            my $pdfile = $ENV{HOME}.'/.personaldictionary.txt';
            my @ownwordlist;
            if (-r $pdfile) {
                open my $pdfh,'<',$pdfile;
                my @tmp = <$pdfh>;
                push @ownwordlist, @tmp;
                close $pdfh;
                map {chomp $_} (@ownwordlist);
                warn "Empty list " if ! @ownwordlist;
            }
            map {s/\W+\$//}@extrawords;
            map {s/\,//} @extrawords;
            @extrawords = grep {/\w/} @extrawords;
            push @ownwordlist, @extrawords;
                @ownwordlist = sort {$a cmp $b} @ownwordlist;
            @ownwordlist = uniq @ownwordlist;
            @ownwordlist = grep {/\w/} @ownwordlist;
            my $bak = $pdfile;
            $bak =~ s/txt$/bak/;
            move $pdfile, $bak;
            open my $fhw, '>', $pdfile;
            for my $word (@ownwordlist) {
                print $fhw $word."\n";
            }
            close $fhw;
            print "Total own wordslist: " . scalar(@ownwordlist)."\n";
        }else {
            die "Now additional words";
        }
    } elsif ($self->file){
        say "Wrong words if any:" if ! $self->silence;
        my $owntext = path($self->file)->slurp('UTF-8');
        say join("\n", SH::Test::Pod::spellcheck($owntext));
    } elsif ($self->fileregex) {
        my $pathdir = Mojo::File->new('.');
        $pathdir = Mojo::File->new($self->path) if $self->path ;
        my @ignored_files = ();
        if ($self->ignoredfiles) {
            my $ignoredfiles = $self->ignoredfiles;
            @ignored_files = split(/,/, $ignoredfiles);
        }
        PATHFILE:
        for my $pathfile($pathdir->list_tree->each) {
            my $regex = $self->fileregex;
            my $qr = qr($regex);
            next if $pathfile !~ /$qr/;
            for my $ignore(@ignored_files) {
                next PATHFILE if $pathfile =~ /\/$ignore$/;
            }
            my $owntext = $pathfile->slurp('UTF-8');
            my @words = SH::Test::Pod::spellcheck($owntext);
            if (@words) {
                say "File $pathfile:";
                say $_ for @words;
            }
        }

    } else {
        binmode (STDIN,':utf8');
        say @{$self->extra_options} if @{$self->extra_options};
        my $owntext = do { local $/; <STDIN> };
        say $owntext;
        print join("\n", SH::Test::Pod::spellcheck($owntext));
        print "\n";
    }
}

__PACKAGE__->new(options_cfg=>{extra=>1})->main();