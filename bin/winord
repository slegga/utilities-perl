#!/usr/bin/env perl

use strict;
use warnings;
use autodie;
use Carp;
use List::MoreUtils qw(first_index none);
use Data::Dumper;
use Data::Printer;

use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../../utilities-perl/lib";

use SH::ScriptX;
use Mojo::Base 'SH::ScriptX';

=encoding utf8

=head1 NAME

winord - windows tidier

=head1 DESCRIPTION

Order windows in KDE

=cut

has x_min => 0;
has y_min => 0;
has x_max => 0;
has y_max => 0;
has windows  => sub{ [] }; # ->[screen]->{windowname}->{attribute}

option "info!", "Show windows info";


#
#       SUBROUTINES
#

=head2 calc_win_size

Takes a total part i.e. 4 = 1/4 *100 % of screen surface
And calculate the number of base squares occupied

=cut

sub get_info {
	my $self = shift;
	die "I am not my self" if ! ref $self;
	my $resraw = `wmctrl -d|grep '*'`;
	my ($x_res,$y_res) = ($resraw=~/WA\:.+?(\d+)x(\d+)/);
	$self->x_min(0);
	$self->y_min(0);
	$self->x_max($x_res);
	$self->y_max($y_res - 36); #40 to much #20 to little

#$y_res -= (36); # remove statusbar size
	my @wmctrl = map{[split(/\s+/,$_,8)]} split(/\n/,`wmctrl -Gl`);
#	@wmctrl = map {(split(/\s+/,$_,8))[7]} @wmctrl;
#	print join("\n", $x_res,$y_res,@wmctrl);
#	print "\n";
	my @win;
	for my $r (@wmctrl) {
		next if $r->[1] == -1;
#		next if $r->[1] != 0; #only work on primary screen
		$win[$r->[1]]{$r->[7]} = {x_pos=>$r->[2], y_pos=>$r->[3]};
	}
#	my %win = map{'name',$_} @wmctrl;
	$self->windows(\@win);
	return $self;
}

sub init_resize {
	my $self = shift;
	my @screens;
	for my $screen(@{$self->windows()}) {
		next if ! $screen;
		my %win = %$screen;
		my $num_win = keys %win;
		for my $key(keys %win) {
			$win{$key}{x_size} = int( ( $self->x_max - $self->x_min )/sqrt($num_win));
			$win{$key}{y_size} = int( ( $self->y_max - $self->y_min )/sqrt($num_win));
		}
		push @screens,\%win;
	}
	$self->windows(\@screens);
	return $self;
}

sub init_replace {
	my $self = shift;
	my @screens;
	for my $screen(@{$self->windows()}) {
		my %win = %$screen;
		my $num_win = keys %win;
		if ($num_win == 2) {

		}
		my $i=1;

		for my $key(sort keys %win) {
			if ($i ==1) {
				$win{$key}{x_pos} = $self->x_min;
				$win{$key}{y_pos} = $self->y_min;
			} elsif($i==2) {
				$win{$key}{x_pos} = $self->x_max - $win{$key}{x_size};
				$win{$key}{y_pos} = $self->y_max - $win{$key}{y_size};
			} elsif($i==3) {
				$win{$key}{x_pos} = $self->x_min;
				$win{$key}{y_pos} = $self->y_max - $win{$key}{y_size};
			} elsif($i==4) {
				$win{$key}{x_pos} = $self->x_max - $win{$key}{x_size};
				$win{$key}{y_pos} = $self->y_min;
			} elsif($i==5) {
				$win{$key}{x_pos} = int(($self->x_max - $win{$key}{x_size}) / 2);
				$win{$key}{y_pos} = $self->y_min;
			} elsif($i==6) {
				$win{$key}{x_pos} = int(($self->x_max - $win{$key}{x_size}) /2);
				$win{$key}{y_pos} = $self->y_max - $win{$key}{y_size};
			} elsif($i==7) {
				$win{$key}{x_pos} = $self->x_min;
				$win{$key}{y_pos} = int(($self->y_max - $win{$key}{y_size}) / 2);
			} elsif($i==8) {
				$win{$key}{x_pos} = $self->x_max - $win{$key}{x_size};
				$win{$key}{y_pos} = int(($self->y_max - $win{$key}{y_size}) /2);
			} elsif($i==9) {
				$win{$key}{x_pos} = int(($self->x_max - $win{$key}{x_size}) / 2);
				$win{$key}{y_pos} = int(($self->y_max - $win{$key}{y_size}) / 2);
			}

			$i++;

		}
		push @screens, \%win;
	}
	$self->windows(\@screens);

	return $self;
}

sub do_resize {
	my $self = shift;
	my $i =0;
	for my $screen(@{$self->windows()}) {
		my %win = %$screen;
		while (my ($key,$value) = each %win) {
			my $resize;
			if (exists $value->{minimize} && $value->{minimize})	 {
		        $resize = 'wmctrl -Fr "' . $key . '" -b add,hidden -b remove,sticky';
			} else {
			    $resize =
			      'wmctrl -Fr "'
			        . $key
			         . '" -b remove,above,fullscreen,sticky,maximized_vert,maximized_horz -e '. $i .','
			         . $value->{x_pos} . ','
			         . $value->{y_pos} . ','
			         . $value->{x_size} . ','
			         . $value->{y_size};
				say $resize;
			}
			`$resize`;
		}
		$i++;
	}
}

sub main {
	my $self = shift;
	$self->get_info();
	# read yaml cofig
#	$winsize{'Mozilla Firefox'}=4;# 4 = 1/4 of screen
#	$winsize{'Kate'}=4;
#	$winsize{'KOrganizer'}=-1; #-1 = minimized
#	$winsize{'Amarok'}=-1; #-1 = minimized
	#go thru all windows and set tmp size
	my @screens;
	for my $screen(@{$self->windows()}) {
		my %win = %$screen;
		my $num_win = keys %win;
		if ($num_win == 2) {
			my $i=0;
			for my $key(sort keys %win) {

				if ($i == 0) {
					$win{$key}{x_pos} = $self->x_min;
					$win{$key}{y_pos} = $self->y_min;
				} elsif ($i == 1) {
					$win{$key}{x_pos} = int(($self->x_min + $self->x_max)/2);
					$win{$key}{y_pos} = $self->y_min;

				}
				$win{$key}{x_size} = int( ( $self->x_max - $self->x_min )/$num_win);
				$win{$key}{y_size} = ( $self->y_max - $self->y_min );
				$i++;
			}
		} elsif ($num_win == 3) {
			my $i=0;
			for my $key(sort keys %win) {

				if ($i == 0) {
					$win{$key}{x_pos} = $self->x_min;
					$win{$key}{y_pos} = $self->y_min;
				} elsif ($i == 1) {
					$win{$key}{x_pos} = int(($self->x_min + $self->x_max)/3);
					$win{$key}{y_pos} = $self->y_min;

				} elsif ($i == 2) {
					$win{$key}{x_pos} = 2 * int(($self->x_min + $self->x_max)/3);
					$win{$key}{y_pos} = $self->y_min;

				}
				$win{$key}{x_size} = int( ( $self->x_max - $self->x_min )/$num_win);
				$win{$key}{y_size} = ( $self->y_max - $self->y_min );
				$i++;
			}
		} elsif ($num_win == 3) {
			my $i=0;
			for my $key(sort keys %win) {

				if ($i == 0) {
					$win{$key}{x_pos} = $self->x_min;
					$win{$key}{y_pos} = $self->y_min;
				} elsif ($i == 1) {
					$win{$key}{x_pos} = int(($self->x_min + $self->x_max)/2);
					$win{$key}{y_pos} = $self->y_min;

				} elsif ($i == 2) {
					$win{$key}{x_pos} = 2 * int(($self->x_min + $self->x_max)/2);
					$win{$key}{y_pos} = $self->y_min;

				} elsif ($i == 3) {
					$win{$key}{x_pos} = 2 * int(($self->x_min + $self->x_max)/2);
					$win{$key}{y_pos} = $self->y_min;

				}
				$win{$key}{x_size} = 2 * int( ( $self->x_max - $self->x_min )/$num_win);
				$win{$key}{y_size} = 2 * int( ( $self->y_max - $self->y_min )/$num_win);
				$i++;
			}
		} else {
			$self->init_resize();
			$self->init_replace();
		}

	}
	$self->do_resize();
}

__PACKAGE__->new->main();

1;

=head1 AUTHOR

Stein Hammer

=cut
